package com.example.kustomerloginanddescribe.ui.homepage

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.kustomer.core.models.KusResult
import com.kustomer.ui.Kustomer
import kotlinx.coroutines.launch

class LoginViewModel : ViewModel() {

    private val _navigateToOrderHistory = MutableLiveData<String?>()
    val navigateToOrderHistory
        get() = _navigateToOrderHistory

    private val _navigateToGuestScreen = MutableLiveData<Boolean?>()
    val navigateToGuestScreen
        get() = _navigateToGuestScreen

    private val _snackbarEvent = MutableLiveData<String?>()
    val snackbarEvent
        get() = _snackbarEvent

    fun logIn(email: String, password: String) {
        // Handle your app's login process as usual. Here, we'll assume that app login always succeeds and returns true
        // Once app login succeeds, you can continue to log the user in to Kustomer
        val loginIsValid = true

        if (loginIsValid) {
            onLoginSucceeded(email)
        }
    }

    // Normally, JWTs should be generated by your backend and fetched by your app. To test login
    // functionality, replace the jwt value with a token that you generate in the https://jwt.io/ debugger,
    // using your org secret key. For more information, see https://developer.kustomer.com/chat-sdk/v2-Android/docs/authentication
    private fun onLoginSucceeded(email: String) {
        viewModelScope.launch {
            // TODO: This is an expired JWT for John Kustomer. Replace it with a valid JWT for your org.
            val jwt =
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gS3VzdG9tZXIiLCJpYXQiOjE1MTYyMzkwMjJ9.QHTAo2csyHXacGIdrSZ2dDvxxqrOR55OEEgQ40ZhW7g"
            Kustomer.getInstance().logIn(jwt) {
                if (it is KusResult.Success) {
                    showSnackbar("Login success")
                    _navigateToOrderHistory.value = email
                } else {
                    showSnackbar("Login failed")
                    _navigateToOrderHistory.value = email
                }
            }
        }
    }

    fun loginEventComplete() {
        _navigateToOrderHistory.value = null
    }

    fun continueAsGuest() {
        _navigateToGuestScreen.value = true
    }

    fun navigateToGuestScreenComplete() {
        _navigateToGuestScreen.value = null
    }

    fun showSnackbar(message: String) {
        _snackbarEvent.value = message
    }

    fun snackbarComplete() {
        _snackbarEvent.value = null
    }
}

@Suppress("UNCHECKED_CAST")
class LoginViewModelFactory : ViewModelProvider.NewInstanceFactory() {
    override fun <T : ViewModel> create(modelClass: Class<T>) =
        (LoginViewModel() as T)
}